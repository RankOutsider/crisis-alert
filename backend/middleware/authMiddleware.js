// backend/middleware/authMiddleware.js
const jwt = require('jsonwebtoken');

// ƒê·∫£m b·∫£o key n√†y gi·ªëng h·ªát v·ªõi key trong authController.js
const SECRET = 'day_la_mot_cai_key_sieu_bi_mat_khong_ai_doan_duoc_123';

const protect = (req, res, next) => {
    // === LOG 1: In ra to√†n b·ªô header ƒë·ªÉ xem token c√≥ ƒë∆∞·ª£c g·ª≠i l√™n kh√¥ng ===
    console.log('--- NEW REQUEST ---');
    console.log('Authorization Header:', req.headers.authorization);

    let token;

    if (
        req.headers.authorization &&
        req.headers.authorization.startsWith('Bearer')
    ) {
        try {
            token = req.headers.authorization.split(' ')[1];
            console.log('Extracted Token:', token); // Log token ƒë√£ ƒë∆∞·ª£c t√°ch ra

            const decoded = jwt.verify(token, SECRET);
            console.log('‚úÖ Token Verified Successfully! Decoded:', decoded); // Log khi th√†nh c√¥ng

            req.user = decoded;
            next();

        } catch (error) {
            // === LOG 2: In ra l·ªói chi ti·∫øt n·∫øu x√°c th·ª±c th·∫•t b·∫°i ===
            console.error('‚ùå Token Verification FAILED!');
            console.error('Error Name:', error.name);
            console.error('Error Message:', error.message);

            return res.status(401).json({ message: 'Token is invalid or expired' });
        }
    } else { // Th√™m else ƒë·ªÉ x·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ header
        console.log('üö´ No Authorization Header or does not start with "Bearer"');
        return res.status(401).json({ message: 'Access denied, no Bearer token provided' });
    }
};

module.exports = { protect };